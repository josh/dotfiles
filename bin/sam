#!/bin/bash

set -e

configure() {
  FILE="$(detect "$1")"
  pushd "$(dirname $FILE)" >/dev/null

  JSON="$(read_json "$FILE")"
  NAME="$(echo "$JSON" | jq --raw-output ".Resources | keys_unsorted | first")"
  HANDLER="$(echo "$JSON" | jq --raw-output '.Resources[$name].Properties.Handler' --arg name "$NAME")"
  RUNTIME="$(echo "$JSON" | jq --raw-output '.Resources[$name].Properties.Runtime' --arg name "$NAME")"
  FILES="$(echo "$JSON" | jq --raw-output '.Resources[$name].Properties.Code.Files[]' --arg name "$NAME")"
}

run() {
  if test -t 0; then
    EVENT_BODY="{}"
  else
    EVENT_BODY="$(cat)"
  fi

  if [ -f ".env" ]; then
    opts='--env-file=.env'
  fi

  docker run --rm $opts --volume "$PWD":/var/task "lambci/lambda:$RUNTIME" "$HANDLER" "$EVENT_BODY" | jq
}

clean() {
  rm -f function.zip
}

package() {
  echo "+ packaging" >&2
  clean
  trap clean EXIT
  zip function.zip $FILES >&2
}

envconfig() {
  if [ -f ".env" ]; then
    cat ".env" | jq --raw-input 'split("=") | {(.[0]): .[1]}' | jq --slurp 'add | {"Environment": {"Variables": .}}'
  fi
}

config() {
  (
    echo "$JSON" | jq --raw-output '.Resources[$name].Properties | del(.Code)' --arg name "$NAME" ;
    envconfig
  ) | jq --slurp 'add'
}

deploy() {
  package
  echo "+ deploying" >&2
  aws lambda update-function-code --function-name "$NAME" --zip-file "fileb://function.zip" >/dev/null
  aws lambda update-function-configuration --function-name "$NAME" --cli-input-json "$(config)"
}

detect() {
  if [ -f "$1" ]; then
    echo "$1"
  else
    find . -maxdepth 1 -name 'template.yaml' -o -name 'template.json'
  fi
}

read_json() {
  filename=$(basename "$1")
  case "${filename##*.}" in
    json)
      cat "$1"
      ;;
    yml|yaml)
      yaml2json "$1"
      ;;
    *)
      echo "unsupported template format: $1"
      exit 1
      ;;
  esac
}

yaml2json() {
  ruby -rjson -ryaml -e 'puts JSON.generate(YAML.load_file(ARGF.path))' "$1"
}

case "$1" in
  run)
    configure "$2"
    run
    ;;

  config)
    configure "$2"
    config
    ;;

  package)
    configure "$2"
    package
    ;;

  deploy)
    configure "$2"
    deploy
    ;;

  *)
    echo "Usage: lambda <command> [<args>]" >&2
    echo "  https://github.com/awslabs/aws-sam-local" >&2
    exit 1
    ;;
esac
