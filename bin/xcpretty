#!/usr/bin/swift sh

import Foundation

enum State {
    case started
    case passed
    case failed
}

enum Type {
    case testSuite(State)
    case testCase(State)
    case output(String)
}

func parseLine(_ line: String) -> Type? {
    func match(_ regexp: String) -> Bool {
        line.range(of: regexp, options: .regularExpression) != nil
    }

    if match(#"Test Suite '(.*)' started"#) {
        return .testSuite(.started)
    } else if match(#"Test Suite '(.*)' passed"#) {
        return .testSuite(.passed)
    } else if match(#"Test Suite '(.*)' failed"#) {
        return .testSuite(.failed)
    } else if match(#"\t Executed (\d+) tests?, with (\d+) failures?"#) {
        return nil
    } else if match(#"Test Case '-\[(.*) (.*)\]' started"#) {
        return .testCase(.started)
    } else if match(#"(?:Test Case) '-\[(.*) (.*)\]' passed \((\w+.\w+) seconds\)"#) {
        return .testCase(.passed)
    } else if match(#"(?:Test Case) '-\[(.*) (.*)\]' failed \((\w+.\w+) seconds\)"#) {
        return .testCase(.failed)
    } else {
        return .output(line)
    }
}

var testsCount = 0
var failures: [String] = []
var lines: [String] = []

while let line = readLine() {
    lines.append(line)

    switch parseLine(line) {
    case .testCase(.started):
        lines = [line]
        testsCount += 1
    case .testCase(.passed):
        fputs(".", stderr)
    case .testCase(.failed):
        failures.append(lines.joined(separator: "\n"))
        fputs("F", stderr)
    default:
        ()
    }
}

fputs("\n\n", stderr)

for line in failures {
    fputs("\(line)\n\n", stderr)
}

fputs("\(testsCount) tests, \(failures.count) failures\n", stderr)
